<?xml version="1.0" encoding="UTF-8"?>



<section xml:id="lesson1" xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>
    Reading Circuits
  </title>
  <p>
    Quantum operations are visualized in what they call "circuits." Circuits are a visualization
    that depict the order of operations. Let's first see what some some familiar operations might look
    like if visualized like a circuit! 
   
  </p>
<section xml:id="sec-cookiecircuits">
  <title>Cookie Circuits</title>
  

        <datafile label="CookieCircuitOneOp" filename="CookieCircuitOneOp.png" include-source="yes">
            <image source="CookieCircuitOneOp.png" width="66%"/>
        </datafile>
   
  <p>
    In this picture, we begin with a plate of 4 cookies (the <em>input</em>). We have one operation, 
    "eat one cookie". After the operation is applied, we are left with 3 cookies. There is only
    one operation depicted, so that is the end of the program. Therefore, the plate with 3 cookies
    is the <em>output</em>. Likewise, if give the same circuit an input of a plate of 3 cookies and applied that operation
    once, we would end up with an output of a plate with 2 cookies. 
  </p>



  <exercise label="Checkpoint1_1-Cookie-Circuit-One-Plate">
    <title>Calculating a Cookie Circuit</title>
    <idx>cookie circuit 1</idx>
    <statement>
        <p>How many cookies will be left after this Cookie Circuit runs?</p>
        <datafile label="Checkpoint1_1-Cookie-Circuit-One-Plate" filename="Checkpoint1_1-Cookie-Circuit-One-Place.png" include-source="yes">
            <image source="Checkpoint1_1-Cookie-Circuit-One-Plate.png" width="450px"/>
        </datafile>
    </statement>
    <choices randomize="no">
      <choice>
        <statement><p>0 cookies</p></statement>
        <feedback><p>There were only two "eat cookie" operations.</p>
         </feedback>
      </choice>
      <choice>
        <statement><p>1 cookie</p></statement>
        <feedback><p>Yes! Start with 3 cookies, eat 2 cookies, and you are left with 1 cookie.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement><p>2 cookies</p></statement>
        <feedback><p>There were two "eat cookie" operations.</p>
        </feedback>
      </choice>
      <choice>
        <statement><p>3 cookies</p></statement>
        <feedback><p>You need to apply the "eat cookies" operations.</p>
        </feedback>
      </choice>
    </choices>
    <hint><p>Operations are read left to right</p></hint>
  </exercise>

    <datafile label="CookieCircuitTwoOps" filename="CookieCircuitTwoOps.png" include-source="yes">
      <image source="CookieCircuitTwoOps.png" width="66%"/>
    </datafile>
  <p>We can also draw a circuit that starts out with multiple plates of cookies
    and applies the operations to each plate. In this case, we start with two plates
    of cookies - one that has 5 cookies and the other that has 3. We then apply 
    operations to each of the plates. There are two operations applied to the plate
    with 5 cookies, and one operation applied to the plate with 3 cookies. We then 
    end up with plates of 3 and 2 cookies, respectively.
    </p>
    <p>
    Pick the circuit that has the 
    correct end state given the start state. (four circuit diagrams with 
    two starting plates of cookies (1-3 cookies) and one or two operations each time, only 
    one has a correct output given the starting input)
  </p>

  <exercise label="Checkpoint1_2-Cookie-Circuit-Two-Plates">
    <title>Multiple Plates of Cookies</title>
    <idx>cookie circuit 2</idx>
    <statement>
        <p>Pick the circuit that has the correct end state given the start state.</p>
    </statement>
    <choices randomize="yes">
      <choice correct="yes">
        <statement><p>OUTPUT: Top: 2 cookies / Bottom: 0 cookies</p>
          <datafile label="Checkpoint1_2-Cookie-Circuit-Two-Plates_A" filename="Checkpoint1_2-Cookie-Circuit-Two-Plates_A.png" include-source="yes">
            <image source="Checkpoint1_2-Cookie-Circuit-Two-Plates_A.png" width="450px"/>
          </datafile>
        </statement>
        <feedback><p>Yes! The top begins with 3 cookies, and you are left with 2 cookies after one "eat cookie" operation. And, the bottom circuit begins with two cookies. After two "eat cookie" operations, there are 0 cookies left.</p>
         </feedback>
      </choice>
      <choice>
//        <statement><p>OUTPUT: Top: 2 cookies / Bottom: 1 cookie</p></statement>
          <statement>
            <datafile label="Checkpoint1_2-Cookie-Circuit-Two-Plates_B" filename="Checkpoint1_2-Cookie-Circuit-Two-Plates_B.png" include-source="yes">
              <image source="Checkpoint1_2-Cookie-Circuit-Two-Plates_B.png" width="450px"/>
            </datafile>
          </statement>
        <feedback><p>There were two "eat cookie" operations for each plate.</p></feedback>
      </choice>
      <choice>
//        <statement><p>OUTPUT: Top: 1 cookie / Bottom: 2 cookies</p></statement>
          <statement>
            <datafile label="Checkpoint1_2-Cookie-Circuit-Two-Plates_C" filename="Checkpoint1_2-Cookie-Circuit-Two-Plates_C.png" include-source="yes">
              <image source="Checkpoint1_2-Cookie-Circuit-Two-Plates_C.png" width="450px"/>
            </datafile>
          </statement>
        <feedback><p>There are two "eat cookie" operations for the top plate, and one "eat cookie" operation for the bottom plate.</p></feedback>
      </choice>
      <choice>
//        <statement><p>OUTPUT: Top: 1 cookie / Bottom: 1 cookie</p></statement>
          <statement>
            <datafile label="Checkpoint1_2-Cookie-Circuit-Two-Plates_D" filename="Checkpoint1_2-Cookie-Circuit-Two-Plates_D.png" include-source="yes">
              <image source="Checkpoint1_2-Cookie-Circuit-Two-Plates_D.png" width="450px"/>
            </datafile>
          </statement>
        <feedback><p>There are two "eat cookie" operations for both plates.</p></feedback>
      </choice>
    </choices>
    <hint><p>Operations are read left to right</p></hint>
  </exercise>






</section>
<section xml:id="sec-mathcircuits">
  <title>Math Circuits</title>
  <introduction>
    <p>
      Now let's consider how we would depict mathematical operations. 
    </p>
  </introduction>
  <p>
    We will use the following operations: 
    <ul>
    <li>
      <p>Increment - add one to a number</p>
      <datafile label="1-1-2_MathCircuitsINC" filename="1-1-2_MathCircuitsINC.png" include-source="yes">
        <image source="1-1-2_MathCircuitsINC.png" width="450px"/>
      </datafile>
    </li>
   <li>
      <p> Decrement - subtract one from a number</p>
      <datafile label="1-1-2_MathCircuitsDEC" filename="1-1-2_MathCircuitsDEC.png" include-source="yes">
        <image source="1-1-2_MathCircuitsDEC.png" width="450px"/>
      </datafile>
    </li>
    <li>
      <p>Negate - negate a number</p>
      <datafile label="1-1-2_MathCircuitsNEGATE" filename="1-1-2_MathCircuitsNEGATE.png" include-source="yes">
        <image source="1-1-2_MathCircuitsNEGATE.png" width="450px"/>
      </datafile>
    </li>
    </ul>
  </p>

(insert multiple-choice questions here that use only one operation at a time.)

<p> We can also define two-variable gates:
    <ul>
    <li>
      <p>Add - add two numbers. Add two numbers and place result in the target, indicated by *. 
      Other input is unchanged.</p>
      <datafile label="1-1-2_MathCircuitsADD" filename="1-1-2_MathCircuitsADD.png" include-source="yes">
        <image source="1-1-2_MathCircuitsADD.png" width="450px"/>
      </datafile>
    </li>
    <li>
      <p>Controlled increment - increment the target if and only if the control is odd.
      Target is indicated by *, control remains unchanged.</p>
      <datafile label="1-1-2_MathCircuitsC-INC" filename="1-1-2_MathCircuitsC-INC.png" include-source="yes">
        <image source="1-1-2_MathCircuitsC-INC.png" width="450px"/>
      </datafile>
    </li> 
    </ul>
  </p>

<p>
  These two-variable gates bring up a few details that cannot be ignored. First - <em> where does the 
  result go? </em> There are two inputs. In mathematics, there is only one result - in programming, 
  we specify where the result goes by writing "variable = expression". We don't have this functionality 
  in quantum operations. In quantum computing, if there are two inputs, 
  there are two outputs - and we need to define what 
  both of those outputs are. In both of the gates defined above, we will place the result in the 
  target, leaving the other output to match its input.
</p>

(insert multiple-choice questions here that use only one operation at a time.)

  <p>
 Consider two starting variables, x and y. We will start with an input of x=5 and y=3.
 Now consider the following sequence of operations:
 x = x+1
 y = y-1 
 x = x + y 
 y = x - y  

 The following circuit would depict that sequence of operations:
  </p>

(insert the picture here)



(now we have a few longer circuits with multiple operations, one for each question.
The first question has all one-variable gates, the second question integrates an add,
and the third and fourth questions have both an add and a controlled increment (the 
if goes a different way in each one))
 <exercise label="Math-Circuit">
    <title>Solving a Math Circuit</title>
    <idx>math circuit 1</idx>
    <statement>
        <p>What are the values of x and y after the following math circuit runs?</p>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement><p>x = , y =   </p></statement>
        <feedback><p>Look at where the * says to place the addition result</p>
         </feedback>
      </choice>
      <choice>
        <statement><p>x = , y =   </p></statement>
        <feedback><p>Yes! Start with 3 cookies, eat 2 cookies, you are left with one cookie.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement><p>x = , y =   </p></statement>
        <feedback><p>There were two "eat cookie" operations.</p>
        </feedback>
      </choice>
      <choice>
        <statement><p>x = , y =   </p></statement>
        <feedback><p>You need to apply the "eat cookies" operations.</p>
        </feedback>
      </choice>
    </choices>
    <hint><p>Look at where the * says to place the addition result.</p></hint>
      <hint><p>Operations go from left to right.</p></hint>
  </exercise>

<exercise label="Math-Circuit-2">
    <title>Solving a Math Circuit</title>
    <idx>math circuit 2</idx>
    <statement>
        <p>What does the circuit look like for this sequence of operations?</p>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement><p>x = , y =   </p></statement>
        <feedback><p>Look at where the * says to place the addition result</p>
         </feedback>
      </choice>
      <choice>
        <statement><p>x = , y =   </p></statement>
        <feedback><p>Yes! Start with 3 cookies, eat 2 cookies, you are left with one cookie.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement><p>x = , y =   </p></statement>
        <feedback><p>There were two "eat cookie" operations.</p>
        </feedback>
      </choice>
      <choice>
        <statement><p>x = , y =   </p></statement>
        <feedback><p>You need to apply the "eat cookies" operations.</p>
        </feedback>
      </choice>
    </choices>
    <hint><p>Look at where the * says to place the addition result.</p></hint>
      <hint><p>Operations go from left to right.</p></hint>
  </exercise>


<exercise label="Math-Circuit-3">
    <title>Solving a Math Circuit</title>
    <idx>math circuit 3</idx>
    <statement>
        <p>What sequence of operations matches this circuit?</p>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement><p>x = , y =   </p></statement>
        <feedback><p>Look at where the * says to place the addition result</p>
         </feedback>
      </choice>
      <choice>
        <statement><p>x = , y =   </p></statement>
        <feedback><p>Yes! Start with 3 cookies, eat 2 cookies, you are left with one cookie.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement><p>x = , y =   </p></statement>
        <feedback><p>There were two "eat cookie" operations.</p>
        </feedback>
      </choice>
      <choice>
        <statement><p>x = , y =   </p></statement>
        <feedback><p>You need to apply the "eat cookies" operations.</p>
        </feedback>
      </choice>
    </choices>
    <hint><p>Look at where the * says to place the addition result.</p></hint>
      <hint><p>Operations go from left to right.</p></hint>
  </exercise>
</section>

<p> Summary:
  <ul>
    <li><p>Circuits depict the order of operations. </p></li>
    <li><p>The order goes from left to right.</p></li>

    <li><p>Left to right depicts <em> order of operations, not physical movement</em>.</p></li>
    <li><p>Multiple items may be depicted in the same circuit.</p></li>
    <li><p>A single operation can involve multiple items.</p></li>
  </ul>
</p>
</section>