<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="lesson1_2" xmlns:xi="http://www.w3.org/2001/XInclude">

    <title>Building Quantum Circuits</title>
    <introduction>
    <p>Quantum computing operations harness quantum properties to have outputs that 
    are not possible with classical computers. For this reason, we represent quantum
    programs and quantum state differently than in classical computing.</p>
    
    <p>In this part of the lesson, we will learn some basic quantum operations that can be 
    implemented by classical computers and introduce a drag-and-drop tool (Q.js) you can use 
    to build build quantum circuits. In future lessons, you will use this tool to explore the 
    behavior of quantum operations that cause properties not possible with classical computers.</p>
    </introduction>

<section xml:id="sec-qubit">
    <title>Qubit: A Quantum Bit</title>
    <p>When Grace Hopper invented the compiler, it allowed programmers to often ignore the 1's and 0's 
    of machine code and instead use higher level programming languages. Unfortunately, the unique features
    of quantum computing are revealed at the level of a single bit, and algorithms are still designed
    at the bit level. For this reason, we will operate on single bits, not integers or larger numbers. 
    </p>
    <p> A quantum bit, or qubit, holds a 0 or 1, just like a classical bit. However, a single
    qubit also holds other interesting information that we will explore throughout this course. 
    In this lesson, we will only use the values of 0 and 1. To represent the more complex state that is 
    possible for a qubit, we use a slightly different syntax. Instead of just writing 0 or 1, we will 
    write <m>|0\rangle</m> or <m>|1\rangle</m>. Later, we will learn more about this syntax and what it means. 
    </p>
    <p> To visualize these states, we will use a white ball: ◯ for <m>|0\rangle</m> and a black ball: ⬤ for <m>|1\rangle</m>.</p>
    <image source="WhiteBlackBalls.png" width="25%"/>
</section>


<section xml:id="sec-not">
    <title>Quantum Operation #1: NOT Gate</title>
    <p> Quantum operations are called <em>gates</em>. The simplest operation is the 
    NOT gate (also known as the X gate). From a classical perspective, it toggles the value 
    between 0 and 1. That is, if the input is <m>|0\rangle</m>, the output is <m>|1\rangle</m>, 
    and vice versa.</p>
    
    <image source="NOTgate.png" width="40%"/>

  <exercise label="Not-Q1">
    <title>NOT Gate Check #1</title>
    <idx>not gate 1</idx>
    <statement>
        <p>What is the output of this circuit?</p>
        <image source="NOT_Q1.png" width="66%"/>
    </statement>
    <choices randomize="no">
      <choice correct="yes">
        <statement><p>◯ <m>|0\rangle</m></p></statement>
        <feedback><p>Yes! Starting with: ◯ <m>|0\rangle</m>; apply the first NOT operation: ⬤ <m>|1\rangle</m>; and apply the second NOT operation: ◯ <m>|0\rangle</m></p></feedback>
      </choice>
      <choice>
        <statement><p>⬤ <m>|1\rangle</m></p></statement>
        <feedback><p>Did you apply the NOT operation two times?</p></feedback>
      </choice>
    </choices>
    <hint><p>Apply the NOT gate twice.</p></hint>
  </exercise>

 <exercise label="Not-Q2">
    <title>NOT Gate Check #2</title>
    <idx>not gate 2</idx>
    <statement>
        <p>What is the output of this circuit?</p>
        <image source="NOT_Q2.png" width="66%"/>
    </statement>
    <choices randomize="no">
      <choice>
        <statement><p>◯ <m>|0\rangle</m></p></statement>
        <feedback><p>Did you apply the NOT operation two times?</p>
         </feedback>
      </choice>
      <choice correct="yes">
        <statement><p>⬤ <m>|1\rangle</m></p></statement>
        <feedback><p>Yes! Starting with: ⬤ <m>|1\rangle</m>; apply the first NOT operation: ◯ <m>|0\rangle</m>; and apply the second NOT operation: ⬤ <m>|1\rangle</m></p></feedback>
      </choice>
    </choices>
    <hint><p>Apply the NOT gate twice.</p></hint>
  </exercise>

 <exercise label="Not-Q3">
    <title>NOT Gate Check #3</title>
    <idx>not gate 3</idx>
    <statement>
      <p>What is the output of this circuit?</p>
      <image source="NOT_Q3.png" width="66%"/>  
    </statement>
    <choices randomize="no">
      <choice correct="yes">
        <statement><p>◯ <m>|0\rangle</m></p></statement>
        <feedback><p>Yes! Starting with: ⬤ <m>|1\rangle</m>; apply the first NOT operation: ◯ <m>|0\rangle</m>; apply the second NOT operation: ⬤ <m>|1\rangle</m>; and apply the third NOT operation: ◯ <m>|0\rangle</m></p></feedback>
      </choice>
      <choice>
        <statement><p>⬤ <m>|1\rangle</m></p></statement>
        <feedback><p>Did you apply the NOT operation three times?</p></feedback>
      </choice>
    </choices>
    <hint><p>Apply the NOT gate three times.</p></hint>
  </exercise>
</section>

  <section>
    <title>Building Quantum Circuits</title>
    <p>In this section, we introduce the interactive quantum circuit builder. 
    To use the circuit builder, drag the <em>gate tiles</em> from the <em>palette</em> 
    and place them onto the circuit to match the given circuit.</p>

    <image source="L1.2-CIRCUIT BUILDER.png" width="75%"/>

    <p>For your first circuit, you will use the circuit builder's <em>Explore</em> mode.
    In <em>Explore</em> mode, you receive feedback every time you make a change. 
    You can ignore the feedback until you think that you are done building the circuit.</p>

      <script>
        identicalCircuitWidget({
          circuit: "L1_2_0",
          instantFeedback: true,
          allowedGates: "X"
        });
      </script>
  </interactive>
  </section>
  
</section>